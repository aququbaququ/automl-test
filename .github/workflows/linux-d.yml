name: CI-d

on: 
  workflow_dispatch:

jobs:
  build-image:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container
        uses: docker/build-push-action@v5
        with:
          tags: project-image
          context: .
          push: false
          outputs: type=docker,dest=/tmp/project.tar
          build-args: |
            "SGHREPO=${{ secrets.SGHREPO }}"
            "SGHDIR=${{ secrets.SGHDIR }}"
            GH_TOKEN=${{ secrets.SGHTOKEN }}
            SGHTOKEN=${{ secrets.SGHTOKEN }}
            "SGHTOKENLOCAL=${{ secrets.SGHTOKENLOCAL }}"
            "SNUSER=${{ secrets.SNUSER }}"
            "SNUSERTOKEN=${{ secrets.SNUSERTOKEN }}"
            "SNSKEY=${{ secrets.SNSKEY }}"
            "HSUSER=${{ secrets.HSUSER }}"
            "HSPASS=${{ secrets.HSPASS }}"
            "HSPORT=${{ secrets.HSPORT }}"
            "NGROK_TOKEN=${{ secrets.NGROK_TOKEN }}"
            "SSH_PASSWORD=${{ secrets.HSPASS }}"
            "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}"
            "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}"
            "ENV64=${{ secrets.ENV64 }}"
            "WORKFLOW_REF=${{ github.workflow_ref }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: project
          path: /tmp/project.tar

  docker-test:
    name: DocerTest
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: project
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/project.tar

      - name: Run Tests
        uses: addnab/docker-run-action@v3
        with:
          image: project-image
          options: |
            --add-host=host.docker.internal:host-gateway
            -e APP=tprimitive-v1-ld-1m-mes-pup.js
          run: |
            cd ./$SGHDIR && git pull
            cd ./data && git switch main && git pull --rebase --autostash && cd ..;
            pm2 delete all && cd ./data && git reset --hard HEAD && cd ..;
            # pm2 start ./${app}.js
            pm2 start ${app}
            # nohup node ./${app}.js &
            # echo test | tee -a ./data/test-${app}.md

  remove-image:
    name: Remove image
    if: always()
    runs-on: ubuntu-latest
    needs: [ docker-test ]
    steps:
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: project