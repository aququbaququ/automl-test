name: CI-d

on: 
  workflow_dispatch:

env:
  SGHREPO: ${{ secrets.SGHREPO }}
  SGHDIR: ${{ secrets.SGHDIR }}
  GH_TOKEN: ${{ secrets.SGHTOKEN }}
  SNUSER: ${{ secrets.SNUSER }}
  SNUSERTOKEN: ${{ secrets.SNUSERTOKEN }}
  SNSKEY: ${{ secrets.SNSKEY }}
  HSUSER: ${{ secrets.HSUSER }}
  HSPASS: ${{ secrets.HSPASS }}
  HSPORT: ${{ secrets.HSPORT }}
  NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
  SSH_PASSWORD: ${{ secrets.HSPASS }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  ENV64: ${{ secrets.ENV64 }}
  WORKFLOW_REF: ${{ github.workflow_ref }}
  SGHTOKEN: ${{ secrets.SGHTOKEN }}
  SGHTOKENLOCAL: ${{ secrets.SGHTOKENLOCAL }}
  WORKFLOW: ${{ github.workflow }}

jobs:
  build-image:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container
        uses: docker/build-push-action@v5
        with:
          tags: project-image
          context: .
          push: false
          outputs: type=docker,dest=/tmp/project.tar
          build-args: |
            SGHREPO=${{ secrets.SGHREPO }}
            SGHDIR=${{ secrets.SGHDIR }}
            "GH_TOKEN=${{ secrets.SGHTOKEN }}"
            SGHTOKEN=${{ secrets.SGHTOKEN }}
            SGHTOKENLOCAL=${{ secrets.SGHTOKENLOCAL }}
            SNUSER=${{ secrets.SNUSER }}
            SNUSERTOKEN=${{ secrets.SNUSERTOKEN }}
            SNSKEY=${{ secrets.SNSKEY }}
            HSUSER=${{ secrets.HSUSER }}
            HSPASS=${{ secrets.HSPASS }}
            HSPORT=${{ secrets.HSPORT }}
            NGROK_TOKEN=${{ secrets.NGROK_TOKEN }}
            SSH_PASSWORD=${{ secrets.HSPASS }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
            ENV64=${{ secrets.ENV64 }}
            WORKFLOW_REF=${{ github.workflow_ref }}
            APP=test
            "WORKFLOW=${{ github.workflow }}"
          secrets: |

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: project
          path: /tmp/project.tar
          retention-days: 1
          overwrite: true
          
  docker-test:
    name: DocerTest
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: project
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/project.tar

      - name: Run Tests
        uses: addnab/docker-run-action@v3
        with:
          image: project-image
          options: |
            --add-host=host.docker.internal:host-gateway
            -e APP=tprimitive-v1-ld-1m-mes-pup.js
            -e GH_TOKEN=${{ env.SGHTOKEN }}
            -e SGHDIR=${{ env.SGHDIR }}
            -e HSPORT=${{ env.HSPORT }}
            -e WORKFLOW=${{ env.WORKFLOW }}
          run: |
            echo $USER
            exec bash && \
            cd /$SGHDIR && git pull && \
            cd ./data && git switch main && git pull --rebase --autostash && cd ..  && \
            pm2 delete all && cd ./data && git reset --hard HEAD && cd ..  && \
            pm2 start ${app}  && \
            # echo test | tee -a ./data/test-${app}.md  && \
            export HANDYSSHUSER="root" && echo "$HANDYSSHUSER" > ./HANDYSSHUSER  && \
            handy-sshd -p "$HSPORT" -u "$(cat ./HANDYSSHUSER)":"$HSPASS" & \
            export boreport=$(shuf -i 2000-65000 -n 1) && echo "$boreport" > ./boreport && \
            nohup bore local -t bore.pub -p "$(cat ./boreport)" "$HSPORT" & \
            cmdpid=$! && \
            sleep 3 && \
            while ! ps -p $cmdpid > /dev/null
            do
              export boreport=$(shuf -i 2000-65000 -n 1)
              echo "$boreport" > ./boreport
              nohup bore local -t bore.pub -p "$(cat ./boreport)" $HSPORT &
              cmdpid=$!
              sleep 3
            done
            MSG="wf: ${WORKFLOW} - ${APP}; boressh:  \`boldssh $(cat ./HANDYSSHUSER)@bore.pub -p $(cat ./boreport)\`" && \
            tmpvar=$(curl -sX POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d "disable_web_page_preview=True" -d "parse_mode=Markdown" -d "chat_id=${TELEGRAM_CHAT_ID}" -d "text=${MSG}");
            sleep 1h

  remove-image:
    name: Remove image
    if: always()
    runs-on: ubuntu-latest
    needs: [ docker-test ]
    steps:
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: project