name: CI-d-w

on: 
  workflow_dispatch:
    inputs:
      mode:
        description: 'mode of dispatch'
        type: choice
        required: false
        default: 'default'
        options:
          - default
          - docker-just-test
          - docker-just-test-all
          - cancell_all
      pm2file:
        description: 'pm2 file'
        type: choice
        required: false
        default: 'pm2-t-2024-1.json'
        options:
          - pm2-t-2024-1.json
          - pm2-t-2024-2.json
          - pm2-t-2024-3.json
          - pm2-t-2024-4.json

env:
  SGHREPO: ${{ secrets.SGHREPO }}
  SGHDIR: ${{ secrets.SGHDIR }}
  GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
  SNUSER: ${{ secrets.SNUSER }}
  SNUSERTOKEN: ${{ secrets.SNUSERTOKEN }}
  SNSKEY: ${{ secrets.SNSKEY }}
  HSUSER: ${{ secrets.HSUSER }}
  HSPASS: ${{ secrets.HSPASS }}
  HSPORT: ${{ secrets.HSPORT }}
  NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
  SSH_PASSWORD: ${{ secrets.HSPASS }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  ENV64: ${{ secrets.ENV64 }}
  WORKFLOW_REF: ${{ github.workflow_ref }}
  SGHTOKEN: ${{ secrets.SGHTOKEN }}
  SGHTOKENLOCAL: ${{ secrets.SGHTOKENLOCAL }}
  WORKFLOW: ${{ github.workflow }}

jobs:
  cancell-all-jobs:
    if: ${{ github.event.inputs.mode == 'cancell_all' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
 
      - name: "Cancel previous workflows"
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          for id in $(gh run list --limit 5000 --jq ".[] | select ((.status == \"queued\" or .status == \"in_progress\") and .workflowName == \"${{ github.workflow }}\") | .databaseId" --json databaseId,status,workflowName); 
          do 
            currRunId=${{ github.run_id }} 
            if [[ "$currRunId" != "$id" ]]; then
              gh run cancel $id; 
            fi
          done;

  build-image:
    if: ${{ github.event.inputs.mode == 'default' }}
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container
        uses: docker/build-push-action@v5
        with:
          tags: project-image
          context: .
          push: false
          outputs: type=docker,dest=/tmp/project.tar
          build-args: |
            SGHREPO=${{ secrets.SGHREPO }}
            SGHDIR=${{ secrets.SGHDIR }}
            "GH_TOKEN=${{ secrets.SGHTOKEN }}"
            SGHTOKEN=${{ secrets.SGHTOKEN }}
            SGHTOKENLOCAL=${{ secrets.SGHTOKENLOCAL }}
            SNUSER=${{ secrets.SNUSER }}
            SNUSERTOKEN=${{ secrets.SNUSERTOKEN }}
            SNSKEY=${{ secrets.SNSKEY }}
            HSUSER=${{ secrets.HSUSER }}
            HSPASS=${{ secrets.HSPASS }}
            HSPORT=${{ secrets.HSPORT }}
            NGROK_TOKEN=${{ secrets.NGROK_TOKEN }}
            SSH_PASSWORD=${{ secrets.HSPASS }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
            ENV64=${{ secrets.ENV64 }}
            WORKFLOW_REF=${{ github.workflow_ref }}
            APP=test
            "WORKFLOW=${{ github.workflow }}"
          secrets: |

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: project
          path: /tmp/project.tar
          retention-days: 1
          overwrite: true

      - name: Invoke workflow
        id: invoke-workflow
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          # gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test"
          gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="pm2-t-2024-1.json"
          sleep 5m
          gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="pm2-t-2024-2.json"
          sleep 5m
          gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="pm2-t-2024-3.json"
          
  docker-test:
    if: failure()
    name: DocerTest
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: project
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/project.tar

      # - name: Run Tests
      #   uses: addnab/docker-run-action@v3
      #   with:
      #     image: project-image
      #     options: |
      #       --add-host=host.docker.internal:host-gateway
      #       -e APP=tprimitive-v1-ld-1m-mes-pup.js
      #       -e GH_TOKEN=${{ env.SGHTOKEN }}
      #       -e SGHDIR=${{ env.SGHDIR }}
      #       -e HSPORT=${{ env.HSPORT }}
      #       -e WORKFLOW=${{ env.WORKFLOW }}
      #     run: |
      #       echo $USER
      #       exec bash && \
      #       cd ./$SGHDIR && git pull && \
      #       cd ./data && git switch main && git pull --rebase --autostash && cd ..  && \
      #       pm2 delete all && cd ./data && git reset --hard HEAD && cd ..  && \
      #       pm2 start ${app}  && \
      #       # echo test | tee -a ./data/test-${app}.md  && \
      #       export HANDYSSHUSER="root" && echo "$HANDYSSHUSER" > ./HANDYSSHUSER  && \
      #       handy-sshd -p "$HSPORT" -u "$(cat ./HANDYSSHUSER)":"$HSPASS" & \
      #       export boreport=$(shuf -i 2000-65000 -n 1) && echo "$boreport" > ./boreport && \
      #       nohup bore local -t bore.pub -p "$(cat ./boreport)" "$HSPORT" & \
      #       cmdpid=$! && \
      #       sleep 3 && \
      #       while ! ps -p $cmdpid > /dev/null
      #       do
      #         export boreport=$(shuf -i 2000-65000 -n 1)
      #         echo "$boreport" > ./boreport
      #         nohup bore local -t bore.pub -p "$(cat ./boreport)" $HSPORT &
      #         cmdpid=$!
      #         sleep 3
      #       done
      #       MSG="wf: ${WORKFLOW} - ${APP}; boressh:  \`boldssh $(cat ./HANDYSSHUSER)@bore.pub -p $(cat ./boreport)\`" && \
      #       tmpvar=$(curl -sX POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d "disable_web_page_preview=True" -d "parse_mode=Markdown" -d "chat_id=${TELEGRAM_CHAT_ID}" -d "text=${MSG}");
      #       sleep 1h

      - name: Sleep for 5h
        uses: jakejarvis/wait-action@master
        with:
          time: '5h'
        timeout-minutes: 360

  remove-image:
    name: Remove image
    if: success() && !failure()
    runs-on: ubuntu-latest
    needs: [ docker-test ]
    steps:
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: project

  docker-just-test-all:
    if: ${{ github.event.inputs.mode == 'docker-just-test-all' }}
    runs-on: ubuntu-latest
    steps:
      - name: Get pm2files
        env:
          GH_TOKEN: ${{ secrets.SGHTOKEN }}
        run: |
          git config --global user.name "name"
          git config --global user.email "email"
          # wget https://github.com/cli/cli/releases/download/v2.52.0/gh_2.52.0_linux_amd64.deb && sudo apt install ./gh_2.52.0_linux_amd64.deb && rm ./gh_2.52.0_linux_amd64.deb
          gh auth setup-git
          gh repo clone $SGHREPO && cd "$SGHDIR"

      - name: Invoke workflow
        id: invoke-workflow
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          cd "$SGHDIR"
          # grep -E "pm2-t-2024-([0-9]+)"
          # grep -E "pm2-t-2024-(.+)"
          appscount=$(ls | grep -E "pm2-t-2024-[0-9]{1}.json" | wc -l)  
          apps=($(ls | grep -E "pm2-t-2024-[0-9]{1}.json"))
          appsperjob=1;
          for (( appindex=0; appindex<$appscount; appindex+=$appsperjob )); do
            appsexpr="$(echo "${apps[@]:$appindex:$appsperjob}")"
            gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="$appsexpr"
            sleep 5m
          done; 


  docker-just-test:
    if: ${{ github.event.inputs.mode == 'docker-just-test' }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Retry Download artifact
        id: retry-download-artifact
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 1
          max_attempts: 1
          retry_wait_seconds: 60
          retry_on_exit_code: 1
          continue_on_error: true
          command: |
            gh run download --repo ${{ github.repository }} -n "project" --dir /tmp

      - uses: MinoruSekine/setup-scoop@v4
        with:
          buckets: extras
          apps: autohotkey podman wget curl aria2 git jq neovim

      - name: Choco help
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: -h

      - name: Install winget
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.SGHTOKENLOCAL }}

      - name: Install-Tools-Windows
        run: |
          # install "$SGHDIR"\ninjatrader\NinjaTrader.Install.msi
          wget https://autohotkey.com/download/ahk-v2.exe
          function dockerAlias {
              podman
          }
          Set-Alias docker dockerAlias
          wsl --install --distribution Ubuntu
          
      # - uses: Vampire/setup-wsl@v3
      #   with:
      #       wsl-shell-command: bash
      #       additional-packages: docker
      #       set-as-default: 'true'

      - name: Install or update WSL
        uses: Ubuntu/WSL/.github/actions/wsl-install@main
        with:
          distro: Ubuntu-20.04
          working-dir: /tmp/github/
          exec: |
              DEBIAN_FRONTEND=noninteractive sudo apt update
              DEBIAN_FRONTEND=noninteractive sudo apt install python3-pip

      # - name: Load image
      #   # shell: wsl-bash {0}
      #   run: |
          # echo "deb <https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_12/> /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          # curl -L <https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_12/Release.key> | sudo apt-key add -
          # sudo apt-get update && sudo apt install podman podman-compose
          # wsl ls `&`& ls
          # wsl sudo apt-get update `&`& sudo apt install podman `&`& ls

          # sudo apt-get update
          # sudo apt install podman
          # podman load --input /tmp/project.tar
          # sudo apt-get dist-upgrade
          # sudo apt-get install ca-certificates curl wget gnupg lsb-release apt-transport-https
          #
          # # systemd-genie requires dotnet runtime, add Microsoft repo
          # wget https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb -O /tmp/packages-microsoft-prod.deb
          # sudo dpkg -i /tmp/packages-microsoft-prod.deb
          # rm /tmp/packages-microsoft-prod.deb
          #
          # # add systemd-genie repo
          # sudo wget -O /etc/apt/trusted.gpg.d/wsl-transdebian.gpg https://arkane-systems.github.io/wsl-transdebian/apt/wsl-transdebian.gpg
          # sudo chmod a+r /etc/apt/trusted.gpg.d/wsl-transdebian.gpg
          # echo -e "deb https://arkane-systems.github.io/wsl-transdebian/apt/ $(lsb_release -cs) main
          # deb-src https://arkane-systems.github.io/wsl-transdebian/apt/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/wsl-transdebian.list > /dev/null
          #
          # # install systemd-genie
          # sudo apt-get update
          # sudo apt-get install systemd-genie
          #
          # # install docker
          # curl https://get.docker.com | sh
          #
          # # allow docker commands to be used without sudo
          # sudo usermod -aG docker $USER
          #
          # # nftables is the default implementation of iptables on Debian but requires linux kernel 5.8+ which is not available on WSL2
          # # https://patrickwu.space/2021/03/09/wsl-solution-to-native-docker-daemon-not-starting/
          # sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
          #
          # # install docker-compose 1.x
          # sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          # sudo chmod +x /usr/local/bin/docker-compose
          #
          # # run systemd-genie when wsl starts
          # echo "genie -i" >> ~/.bashrc
          
          # restart wsl
          # exit
          # docker load --input /tmp/project.tar
      
      # - name: StopWsl
      #   run: |
      #     wsl --shutdown 
      #     # wsl
      #
      # - name: Load image2
      #   shell: wsl-bash {0}
      #   run: | 
      #     docker load --input /tmp/project.tar

      # - name: Load image
      #   run: docker load --input /tmp/project.tar

      - name: "Cancel current workflow"
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          $currRunId=${{ github.run_id }} 
          gh run cancel $currRunId; 
          sleep 60s
          # for id in $(gh run list --limit 5000 --jq ".[] | select ((.status == \"queued\" or .status == \"in_progress\") and .workflowName == \"${{ github.workflow }}\") | .databaseId" --json databaseId,status,workflowName); 
          # do 
          #   if [[ "$currRunId" != "$id" ]]; then
          #     gh run cancel $id; 
          #   fi
          # done;

      - name: Run Docker container
        env:
          GH_TOKEN: ${{ secrets.SGHTOKEN }}
        run: |
          echo start
          # possible puppeteer socket stuck fix tcp/udp network offload fix
          sudo ethtool -K eth0 tx off rx off

            # -itd --name main-app \
            #           -p 2222:22 \
            # -v $(pwd)/data:/"$SGHDIR"/data \


          git config --global user.name "name"
          git config --global user.email "email"
          wget https://github.com/cli/cli/releases/download/v2.52.0/gh_2.52.0_linux_amd64.deb && sudo apt install ./gh_2.52.0_linux_amd64.deb && rm ./gh_2.52.0_linux_amd64.deb
          gh auth setup-git
          gh repo clone $SGHREPO && cd "$SGHDIR"
          tmpvar=$(git submodule update --init --recursive && git config submodule.recurse true && git pull)
          sudo apt-get install ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils 
          #chromium-browser
          #chromium
          #sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils
          #wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 
          #sudo dpkg -i google-chrome-stable_current_amd64.deb; sudo apt-get -fy install
          
          curl https://mise.run | sh
          #echo '~/.local/bin/mise activate fish | source' >> ~/.config/fish/config.fish
          echo 'eval "$(~/.local/bin/mise activate bash)"' >> ~/.bashrc && source ~/.bashrc
          mise use --global node@14.15.4
          
          npm i -g yarn && npm i -g pm2 && npm i -g nodemon && yarn config set network-timeout 600000 -g && yarn --ignore-optional --ignore-scripts && node ./node_modules/puppeteer/install.js
          
          npm i -g imgur-upload-cli
          sudo apt install catimg chafa 
          # wget https://github.com/atanunq/viu/releases/download/v1.5.0/viu-x86_64-unknown-linux-musl
          appsperjob=1
          # appscount=$(jq -r ".apps[].name" ./pm2-t-2024-?.json | wc -l)  
          # apps=($(jq -r ".apps[].script" ./pm2-t-2024-?.json))
          # appnames=($(jq -r ".apps[].name" ./pm2-t-2024-?.json))
          pm2file="${{ github.event.inputs.pm2file }}"
          appscount=$(jq -r ".apps[].name" ./"$pm2file" | wc -l)  
          apps=($(jq -r ".apps[].script" ./"$pm2file"))
          appnames=($(jq -r ".apps[].name" ./"$pm2file"))
          for (( appindex=0; appindex<$appscount; appindex+=$appsperjob )); do
            appsexpr="$(echo "${apps[@]:$appindex:$appsperjob}")"
            appnameexpr="$(echo "${appnames[@]:$appindex:$appsperjob}")"
            docker run \
              -d --name "main-app-$appindex-$appnameexpr" \
              -v $(pwd):/"$SGHDIR" \
              -v ~/.pm2/logs:/root/.pm2/logs \
              --add-host=host.docker.internal:host-gateway \
              -e APP="$appsexpr" \
              -e APPINDEX="$appindex" \
              -e GH_TOKEN=${{ env.SGHTOKEN }} \
              -e SGHDIR=${{ env.SGHDIR }} \
              -e HSPASS=${{ env.HSPASS }} \
              -e HSPORT=${{ env.HSPORT }} \
              -e WORKFLOW=${{ env.WORKFLOW }} \
              -e TELEGRAM_BOT_TOKEN=${{ env.TELEGRAM_BOT_TOKEN }} \
              -e TELEGRAM_CHAT_ID=${{ env.TELEGRAM_CHAT_ID }} \
              project-image
          done; 
          echo "doocker complete"

          # sleep 1h


      - name: Network-tools
        run: |
            echo "HSPORT=$HSPORT" >> $GITHUB_ENV
            sudo apt-get update
            sudo apt install fish magic-wormhole jq
            mkdir -p ~/.config/fish
            mkdir -p ~/.local/bin
  
            sudo tee -a ~/.bash_profile <<EOF
              if [ -f ~/.bashrc ]; then
                . ~/.bashrc
              di
            EOF
            sudo chsh -s /usr/bin/fish runner
            sudo chsh -s /usr/bin/fish root
            
            wget https://github.com/neovim/neovim-releases/releases/download/v0.10.0/nvim.appimage
            chmod u+x ./nvim.appimage && mv ./nvim.appimage ~/.local/bin/nvim
            sudo apt-get install fuse libfuse2
            #git clone https://github.com/LazyVim/starter ~/.config/lazyvim
            git clone https://github.com/LazyVim/starter ~/.config/nvim

            wget https://github.com/extrawurst/gitui/releases/download/v0.26.3/gitui-linux-x86_64.tar.gz && tar xvf gitui-linux-x86_64.tar.gz && mv ./gitui ~/.local/bin/.
            wget https://github.com/jesseduffield/lazygit/releases/download/v0.42.0/lazygit_0.42.0_Linux_x86_64.tar.gz && tar -zxvf lazygit_0.42.0_Linux_x86_64.tar.gz lazygit && mv lazygit ~/.local/bin/.
            cp -r "$SGHDIR"/fixes/ghrunner-dotfiles/. ~/.
            cp -r "$SGHDIR"/fixes/termux-configs/lazyvim ~/.config/.
            sudo systemctl restart sshd
            fish -c "lvim" &
  
            echo "export TERM=xterm-256color" >> ~/.bashrc
            fish -c "set -Ux TERM xterm-256color"
            wget https://github.com/nwtgck/handy-sshd/releases/download/v0.4.3/handy-sshd-0.4.3-linux-amd64.deb && sudo apt install ./handy-sshd-0.4.3-linux-amd64.deb && rm ./handy-sshd-0.4.3-linux-amd64.deb
            sudo handy-sshd -p "$HSPORT" -u "$HSUSER":"$HSPASS" &
            WEBPORT="$HSPORT"
            wget https://github.com/ekzhang/bore/releases/download/v0.5.1/bore-v0.5.1-x86_64-unknown-linux-musl.tar.gz && tar xf ./bore-v0.5.1-x86_64-unknown-linux-musl.tar.gz && mv ./bore ~/.local/bin/.
            chmod +x ~/.local/bin/.
            boreport=$(shuf -i 2000-65000 -n 1)
            nohup bore local -t bore.pub -p $boreport $HSPORT &
            cmdpid=$!
            sleep 3
            while ! ps -p $cmdpid > /dev/null
            do
              boreport=$(shuf -i 2000-65000 -n 1)
              nohup bore local -t bore.pub -p $boreport $HSPORT &
              cmdpid=$!
              sleep 3
            done
            echo "boreport=$boreport" >> $GITHUB_ENV
            
            echo "${{ github.workflow }}" > ~/workflowname
            MSG=$'\n'"wf: ${{ github.workflow }} - MAIN - ${{ github.event.inputs.pm2file }}"$'\n'"boressh:  \`boldssh ${HSUSER}@bore.pub -p ${boreport}\`";
            tmpvar=$(curl -sX POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d "disable_web_page_preview=True" -d "parse_mode=Markdown" -d "chat_id=${TELEGRAM_CHAT_ID}" -d "text=${MSG}");
            
            echo $HSUSER:$HSPASS | sudo chpasswd root
            echo $HSUSER:$HSPASS | sudo chpasswd runner
            sudo sed -i 's/^PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sudo echo 'PermitRootLogin yes' | sudo tee -a /etc/ssh/sshd_config
            sudo systemctl reload sshd

      - name: Sleep for 5h
        uses: jakejarvis/wait-action@master
        with:
          time: '5h'
        timeout-minutes: 360


      - name: Commit changes
        id: commit
        if: success() || failure()
        #working-directory: automl-test
        # uses: nick-fields/retry@v3
        # with:
        #   timeout_minutes: 5
        #   max_attempts: 1
        #   command: |
        env:
          GH_TOKEN: ${{ secrets.SGHTOKEN }}
        run:  |
            # [[ $(docker ps --filter "name=^/$name$" --format '{{.Names}}') == $name ]]
            # if [[ "$(docker ps --filter \"name=main-app-*\" --format '{{.Names}}' | grep -c main-app)" -ge 0 ]]; then
            # if [[ $(docker ps --filter "name=main-app-*" --format '{{.Names}}' | grep -q main-app) ]]; then
            #     echo found
            # else
            #     echo not found
            # fi
            # docker stop $(docker ps -a -q)
            # docker rm $(docker ps -a -q)
            docker rm -f $(docker ps -a -q)

            # cd ./$SGHDIR && git pull
            # cd ./data && git switch main && git pull --rebase --autostash

            cd ./$SGHDIR/data && mkdir -p ~/stash
            git ls-files --others --exclude-standard | xargs -I {} mv {} ~/stash/
            git ls-files -m | xargs -I {} mv {} ~/stash/
            cd .. && git pull
            cd ./data && git switch main && git pull --rebase --autostash
            rsync -av ~/stash/* ./

            
            git ls-files --others --exclude-standard | grep trades | xargs git add
            pm2file="${{ github.event.inputs.pm2file }}"
            git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "$pm2file docker trade changes" && git push origin HEAD:main; }
            git ls-files -m | grep trades | xargs git add
            git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "$pm2file docker modified trade changes" && git push origin HEAD:main; }
            cd ..;
            git add ./data
            git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "$pm2file docker trade changes" && git push origin HEAD:main; }

            # mkdir reports
            # git ls-files --others --exclude-standard | grep trades | xargs -I {} mv {} reports/
            # git ls-files --others --exclude-standard | grep test | xargs -I {} mv {} reports/
            # git ls-files -m | grep trades | xargs -I {} mv {} reports/
            # git ls-files -m | grep test | xargs -I {} mv {} reports/
            # mv reports ../../reports; 
