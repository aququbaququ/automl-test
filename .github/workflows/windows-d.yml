name: CI-d-w

on: 
  workflow_dispatch:
    inputs:
      mode:
        description: 'mode of dispatch'
        type: choice
        required: false
        default: 'docker-just-test'
        options:
          - default
          - docker-just-test
          - docker-just-test-all
          - cancell_all
      pm2file:
        description: 'pm2 file'
        type: choice
        required: false
        default: 'pm2-t-2024-1.json'
        options:
          - pm2-t-2024-1.json
          - pm2-t-2024-2.json
          - pm2-t-2024-3.json
          - pm2-t-2024-4.json

env:
  SGHREPO: ${{ secrets.SGHREPO }}
  SGHDIR: ${{ secrets.SGHDIR }}
  GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
  SNUSER: ${{ secrets.SNUSER }}
  SNUSERTOKEN: ${{ secrets.SNUSERTOKEN }}
  SNSKEY: ${{ secrets.SNSKEY }}
  HSUSER: ${{ secrets.HSUSER }}
  HSPASS: ${{ secrets.HSPASS }}
  HSPORT: ${{ secrets.HSPORT }}
  NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
  SSH_PASSWORD: ${{ secrets.HSPASS }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  ENV64: ${{ secrets.ENV64 }}
  WORKFLOW_REF: ${{ github.workflow_ref }}
  SGHTOKEN: ${{ secrets.SGHTOKEN }}
  SGHTOKENLOCAL: ${{ secrets.SGHTOKENLOCAL }}
  WORKFLOW: ${{ github.workflow }}

jobs:
  cancell-all-jobs:
    if: ${{ github.event.inputs.mode == 'cancell_all' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
 
      - name: "Cancel previous workflows"
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          for id in $(gh run list --limit 5000 --jq ".[] | select ((.status == \"queued\" or .status == \"in_progress\") and .workflowName == \"${{ github.workflow }}\") | .databaseId" --json databaseId,status,workflowName); 
          do 
            currRunId=${{ github.run_id }} 
            if [[ "$currRunId" != "$id" ]]; then
              gh run cancel $id; 
            fi
          done;

  build-image:
    if: ${{ github.event.inputs.mode == 'default' }}
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container
        uses: docker/build-push-action@v5
        with:
          tags: project-image
          context: .
          push: false
          outputs: type=docker,dest=/tmp/project.tar
          build-args: |
            SGHREPO=${{ secrets.SGHREPO }}
            SGHDIR=${{ secrets.SGHDIR }}
            "GH_TOKEN=${{ secrets.SGHTOKEN }}"
            SGHTOKEN=${{ secrets.SGHTOKEN }}
            SGHTOKENLOCAL=${{ secrets.SGHTOKENLOCAL }}
            SNUSER=${{ secrets.SNUSER }}
            SNUSERTOKEN=${{ secrets.SNUSERTOKEN }}
            SNSKEY=${{ secrets.SNSKEY }}
            HSUSER=${{ secrets.HSUSER }}
            HSPASS=${{ secrets.HSPASS }}
            HSPORT=${{ secrets.HSPORT }}
            NGROK_TOKEN=${{ secrets.NGROK_TOKEN }}
            SSH_PASSWORD=${{ secrets.HSPASS }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
            ENV64=${{ secrets.ENV64 }}
            WORKFLOW_REF=${{ github.workflow_ref }}
            APP=test
            "WORKFLOW=${{ github.workflow }}"
          secrets: |

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: project
          path: /tmp/project.tar
          retention-days: 100
          overwrite: true

      - name: Invoke workflow
        id: invoke-workflow
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          # gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test"
          gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="pm2-t-2024-1.json"
          sleep 5m
          gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="pm2-t-2024-2.json"
          sleep 5m
          gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="pm2-t-2024-3.json"
          
      # - uses: geekyeggo/delete-artifact@v2
      #   with:
      #     name: project

  docker-just-test-all:
    if: ${{ github.event.inputs.mode == 'docker-just-test-all' }}
    runs-on: ubuntu-latest
    steps:
      - name: Get pm2files
        env:
          GH_TOKEN: ${{ secrets.SGHTOKEN }}
        run: |
          git config --global user.name "name"
          git config --global user.email "email"
          # wget https://github.com/cli/cli/releases/download/v2.52.0/gh_2.52.0_linux_amd64.deb && sudo apt install ./gh_2.52.0_linux_amd64.deb && rm ./gh_2.52.0_linux_amd64.deb
          gh auth setup-git
          gh repo clone $SGHREPO && cd "$SGHDIR"

      - name: Invoke workflow
        id: invoke-workflow
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          cd "$SGHDIR"
          # grep -E "pm2-t-2024-([0-9]+)"
          # grep -E "pm2-t-2024-(.+)"
          appscount=$(ls | grep -E "pm2-t-2024-[0-9]{1}.json" | wc -l)  
          apps=($(ls | grep -E "pm2-t-2024-[0-9]{1}.json"))
          appsperjob=1;
          for (( appindex=0; appindex<$appscount; appindex+=$appsperjob )); do
            appsexpr="$(echo "${apps[@]:$appindex:$appsperjob}")"
            gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f mode="docker-just-test" -f pm2file="$appsexpr"
            sleep 5m
          done; 


  docker-just-test:
    if: ${{ github.event.inputs.mode == 'docker-just-test' }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Retry Download artifact
      #   id: retry-download-artifact
      #   env:
      #     GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
      #   uses: nick-fields/retry@v3
      #   with:
      #     timeout_minutes: 1
      #     max_attempts: 1
      #     retry_wait_seconds: 60
      #     retry_on_exit_code: 1
      #     continue_on_error: true
      #     command: |
      #       gh run download --repo ${{ github.repository }} -n "project" --dir /tmp

      - name: PM scoop
        uses: MinoruSekine/setup-scoop@v4
        with:
          buckets: extras
          apps: autohotkey podman wget curl aria2 git jq neovim gtools cloudflared
          update_path: 'true'

      - name: PM chocolatey
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: -h

      - name: PM winget
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.SGHTOKENLOCAL }}

      - name: Install-Tools-Windows
        run: |
          $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."   
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" && Update-SessionEnvironment && refreshenv

          #region main apps
          scoop install autohotkey podman wget curl aria2 git jq neovim gtools
          scoop install clink busybox ripgrep ag fzf
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" && Update-SessionEnvironment && refreshenv
          clink autorun install
          # scoop install scoop-completion
          scoop install main/clink-completions
          clink set autosuggest.enable true
          clink set history_io 1
          clink set clink.autoupdate off
          scoop install neovim extras/lunarvim gitui lazygit
          # Remove-Item -Path $env:LOCALAPPDATA\nvim -Force
          git clone https://github.com/LazyVim/starter $env:LOCALAPPDATA\nvim
          git clone https://github.com/LazyVim/starter $env:LOCALAPPDATA\nvim
          scoop bucket add wordijp https://github.com/wordijp/scoop-bucket && scoop install wordijp/alias-exe && scoop bucket rm wordijp
          mkdir $env:USERPROFILE\bin && pathed /USER /APPEND $env:USERPROFILE\bin
          wget https://github.com/manasmbellani/xargswin/releases/download/initial/xargswin.exe && mv .\xargswin.exe $env:USERPROFILE\bin\xargswin.exe

          echo "debug 1"
          # scoop install vfox
          # # call clink info | findstr scripts
          # wget https://github.com/version-fox/vfox/blob/main/internal/shell/clink_vfox.lua -P %CLINK_COMPLETIONS_DIR%
          # vfox add nodejs
          # vfox install nodejs@14.15.4
          # vfox use -g nodejs@14.15.4
          # vfox add python
          # vfox install python@3.7.2
          # vfox use -g python@3.7.2
          #endregion

          # netsh int tcp show global
          # netsh int tcp set global chimney=disabled
          # Disable-NetAdapterChecksumOffload -Name "*"

          .\scripts\DisablePasswordComplexity.ps1
          # $PASS="P@ssw0rd!"
          $PASS="$env:HSPASS"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $PASS -Force)
          
          echo "debug 2"
          wget https://github.com/nwtgck/handy-sshd/releases/download/v0.4.3/handy-sshd-0.4.3-windows-amd64.zip
          unzip handy-sshd-0.4.3-windows-amd64.zip
          # scoop bucket add Syndim https://github.com/Syndim/scoop-bucket && scoop install Syndim/bore
          wget https://github.com/ekzhang/bore/releases/download/v0.5.1/bore-v0.5.1-x86_64-pc-windows-msvc.zip
          unzip bore-v0.5.1-x86_64-pc-windows-msvc.zip
          # Start-Job -ScriptBlock { .\handy-sshd.exe -p "$env:HSPORT" -u runneradmin:"$env:HSPASS" }
          New-Item -Path Env:\HSPORT -Value $env:HSPORT -Force
          New-Item -Path Env:\HSPASS -Value $env:HSPASS -Force
          cmd /c "start /b .\handy-sshd.exe -p 7777 -u runneradmin:%HSPASS% --shell powershell"
          # cmd /c "start /b .\handy-sshd.exe -p %HSPORT% -u runneradmin:%HSPASS%"

          # Start-Job -ScriptBlock { cmd /c "start /b .\handy-sshd.exe -p 7777 -u runneradmin:%HSPASS% --shell powershell" }
          $rules = Get-NetFirewallRule -All |? {$_.DisplayName -match "handy-sshd"}
          $rules |% {
            Set-NetFirewallRule -DisplayName $_.DisplayName -Action Allow -Profile Any -Direction Inbound
          }

          echo "debug 3"
          # Add-WindowsCapability -Online -Name OpenSSH.Server*
          Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 
          # Start-Service sshd
          Start-Service -Name "sshd"
          # Set-Service -Name sshd -StartupType 'Automatic'
          Set-Service -Name "sshd" -StartupType Automatic
          # Start-Service 'ssh-agent'
          # Set-Service -Name 'ssh-agent' -StartupType 'Automatic'
          Set-Service ssh-agent -StartupType Manual
          Start-Service 'ssh-agent'
          New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

          echo "debug 3.5"

          #region cloudflare ssh
          mkdir -p "$env:USERPROFILE\.ssh"
          cat .\scripts\cloudflare-sshconfig | tee -a "$env:USERPROFILE\.ssh\config"
          cmd /c "start /b cloudflared tunnel --url ssh://localhost:22 > output.msg 2> output.err"
          $line = Get-Content ".\output.err" -Wait |Where-Object { $_ -match '\.trycloudflare.com' } |Select -First 1
          $cloudflareUrl = $line.split(" ",5)[-1].Trim().Replace('https://','').split("|")[0].Trim()
          cmd /c "start /b cloudflared tunnel --url rdp://localhost:3389 > output-rdp.msg 2> output-rdp.err"
          $linerdp = Get-Content ".\output-rdp.err" -Wait |Where-Object { $_ -match '\.trycloudflare.com' } |Select -First 1
          $cloudflarerdpUrl = $linerdp.split(" ",5)[-1].Trim().Replace('https://','').split("|")[0].Trim()
          $MSG="`n" + "wf: ${{ github.workflow }} - MAIN - ${{ github.event.inputs.pm2file }}" + "`n" + "boressh:  ``boldssh runneradmin@$cloudflareUrl -p 7777``" + "`n" + "rdp: runneradmin@...:  ``cloudflared access rdp --hostname $cloudflarerdpUrl --url rdp://localhost:4389``";

          # taskkill /IM cloudflared.exe /F
          # if exist "%USERPROFILE%\.cloudflared" del /s/q "%USERPROFILE%\.cloudflared\*.*"
          # start /B cloudflared access rdp --hostname [access hostname] --url localhost:2244 --destination [workstation]:3389 > NUL
          # mstsc /v:localhost:2244
          # taskkill /IM cloudflared.exe /F
          #endregion

          echo "debug 4"

          echo $TELEGRAM_BOT_TOKEN
          # P@ssw0rd!

          $TELEGRAM_BOT_TOKEN="$env:TELEGRAM_BOT_TOKEN"
          $TELEGRAM_CHAT_ID="$env:TELEGRAM_CHAT_ID"          
          $URL='https://api.telegram.org/bot{0}' -f $TELEGRAM_BOT_TOKEN
          $MessageToSend = New-Object psobject 
          $MessageToSend | Add-Member -MemberType NoteProperty -Name 'chat_id' -Value $TELEGRAM_CHAT_ID
          $MessageToSend | Add-Member -MemberType NoteProperty -Name 'parse_mode' -Value 'MarkDown'
          $MessageToSend | Add-Member -MemberType NoteProperty -Name 'text' -Value $MSG
          Invoke-RestMethod -Method Post -Uri ($URL +'/sendMessage') -Body ($MessageToSend | ConvertTo-Json) -ContentType "application/json"

      - name: Install-Tools-Windows2
        env:
          GH_TOKEN: ${{ secrets.SGHTOKEN }}
        run: |
          # copy nssm.exe C:\Windows\System32
          git config --global user.name "name"
          git config --global user.email "email"
          gh auth setup-git
          gh repo clone "$env:SGHREPO" && cd ".\$env:SGHDIR"
          # msiexec /unregister
          # msiexec /regserver
          cp .\ninjatrader\NinjaTrader.Install.msi .\.
          ls .\
          # msiexec.exe /i NinjaTrader.Install.msi /qn
          $pkgPath="$(pwd)"+"/NinjaTrader.Install.msi"
          echo "pkgPath" 
          echo $pkgPath
          Start-Process msiexec "/i NinjaTrader.Install.msi /norestart /qn" -Wait;
          # wget https://autohotkey.com/download/ahk-v2.exe
          pathed /USER /APPEND "C:\Users\runneradmin\scoop\apps\autohotkey\current\UX"
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" && Update-SessionEnvironment && refreshenv
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User") 
          Copy-Item  -Path '.\ninjatrader\Documents\NinjaTrader 8' -Destination "C:\Users\runneradmin\Documents" -Recurse -force
          Start-Sleep -Seconds 60
          AutoHotkeyUX.exe ".\nt8ahk.ahk2"
          Start-Sleep -Seconds 60
          winget install Microsoft.DotNet.SDK.8 --disable-interactivity --accept-source-agreements --accept-package-agreements --silent
          AutoHotkeyUX.exe ".\nt8ahk-strategy.ahk2" && Start-Sleep -Seconds 20

          Copy-Item  -Path '.\fixes\windows-alias-exe\.alias-exe' -Destination "C:\Users\runneradmin" -Recurse -force
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" && Update-SessionEnvironment && refreshenv
          alias repair
          
      - name: Install-Tools-Windows3
        if: success() && failure()
        run: |
          # wget https://download2.interactivebrokers.com/installers/tws/stable-standalone/tws-stable-standalone-windows-x64.exe
          winget install -e --id Oracle.JavaRuntimeEnvironment
          wget https://download2.interactivebrokers.com/installers/ntws/latest-standalone/ntws-latest-standalone-windows-x64.exe
          #region podman
          podman machine init && podman machine start
          function dockerAlias {
              podman
          }
          Set-Alias docker dockerAlias
          echo $(wsl -d podman-machine-default uname -a)
          #endregion

          # .\OpenD.exe -login_account=$MACC -login_pwd=$MPWD -lang=en
          # wsl --install
          # Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing
          # Rename-Item .\Ubuntu.appx .\Ubuntu.zip
          # Expand-Archive .\Ubuntu.zip .\Ubuntu
          # cd .\Ubuntu
          # Add-AppxPackage .\Ubuntu.appx
          # $userenv = [System.Environment]::GetEnvironmentVariable("Path", "User")
          # [System.Environment]::SetEnvironmentVariable("PATH", $userenv + ";C:\Users\Administrator\Ubuntu", "User")
          # wsl --install --distribution Ubuntu
          
      - name: Sleep for 5h
        run: |
          Start-Sleep -Seconds 18000

      - name: Load image
        run: podman load --input /tmp/project.tar

      # - name: Load image
      #   run: docker load --input /tmp/project.tar

      - name: "Cancel current workflow"
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          $currRunId=${{ github.run_id }} 
          gh run cancel $currRunId; 
          sleep 60s

      - name: Run Docker container
        env:
          GH_TOKEN: ${{ secrets.SGHTOKEN }}
        run: |
          echo start
          # possible puppeteer socket stuck fix tcp/udp network offload fix
          sudo ethtool -K eth0 tx off rx off

            # -itd --name main-app \
            #           -p 2222:22 \
            # -v $(pwd)/data:/"$SGHDIR"/data \


          git config --global user.name "name"
          git config --global user.email "email"
          wget https://github.com/cli/cli/releases/download/v2.52.0/gh_2.52.0_linux_amd64.deb && sudo apt install ./gh_2.52.0_linux_amd64.deb && rm ./gh_2.52.0_linux_amd64.deb
          gh auth setup-git
          gh repo clone $SGHREPO && cd "$SGHDIR"
          tmpvar=$(git submodule update --init --recursive && git config submodule.recurse true && git pull)
          sudo apt-get install ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils 
          #chromium-browser
          #chromium
          #sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils
          #wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 
          #sudo dpkg -i google-chrome-stable_current_amd64.deb; sudo apt-get -fy install
          
          curl https://mise.run | sh
          #echo '~/.local/bin/mise activate fish | source' >> ~/.config/fish/config.fish
          echo 'eval "$(~/.local/bin/mise activate bash)"' >> ~/.bashrc && source ~/.bashrc
          mise use --global node@14.15.4
          
          npm i -g yarn && npm i -g pm2 && npm i -g nodemon && yarn config set network-timeout 600000 -g && yarn --ignore-optional --ignore-scripts && node ./node_modules/puppeteer/install.js
          
          npm i -g imgur-upload-cli
          sudo apt install catimg chafa 
          # wget https://github.com/atanunq/viu/releases/download/v1.5.0/viu-x86_64-unknown-linux-musl
          appsperjob=1
          # appscount=$(jq -r ".apps[].name" ./pm2-t-2024-?.json | wc -l)  
          # apps=($(jq -r ".apps[].script" ./pm2-t-2024-?.json))
          # appnames=($(jq -r ".apps[].name" ./pm2-t-2024-?.json))
          pm2file="${{ github.event.inputs.pm2file }}"
          appscount=$(jq -r ".apps[].name" ./"$pm2file" | wc -l)  
          apps=($(jq -r ".apps[].script" ./"$pm2file"))
          appnames=($(jq -r ".apps[].name" ./"$pm2file"))
          for (( appindex=0; appindex<$appscount; appindex+=$appsperjob )); do
            appsexpr="$(echo "${apps[@]:$appindex:$appsperjob}")"
            appnameexpr="$(echo "${appnames[@]:$appindex:$appsperjob}")"
            docker run \
              -d --name "main-app-$appindex-$appnameexpr" \
              --memory="1g"
              -v $(pwd):/"$SGHDIR" \
              -v ~/.pm2/logs:/root/.pm2/logs \
              --add-host=host.docker.internal:host-gateway \
              -e APP="$appsexpr" \
              -e APPINDEX="$appindex" \
              -e GH_TOKEN=${{ env.SGHTOKEN }} \
              -e SGHDIR=${{ env.SGHDIR }} \
              -e HSPASS=${{ env.HSPASS }} \
              -e HSPORT=${{ env.HSPORT }} \
              -e WORKFLOW=${{ env.WORKFLOW }} \
              -e TELEGRAM_BOT_TOKEN=${{ env.TELEGRAM_BOT_TOKEN }} \
              -e TELEGRAM_CHAT_ID=${{ env.TELEGRAM_CHAT_ID }} \
              project-image
          done; 
          echo "doocker complete"

          # sleep 1h

      - name: Sleep for 5h
        run: |
          Start-Sleep -Seconds 18000


      - name: Commit changes
        id: commit
        if: success() && failure()
        #working-directory: automl-test
        # uses: nick-fields/retry@v3
        # with:
        #   timeout_minutes: 5
        #   max_attempts: 1
        #   command: |
        env:
          GH_TOKEN: ${{ secrets.SGHTOKEN }}
        run:  |
            # [[ $(docker ps --filter "name=^/$name$" --format '{{.Names}}') == $name ]]
            # if [[ "$(docker ps --filter \"name=main-app-*\" --format '{{.Names}}' | grep -c main-app)" -ge 0 ]]; then
            # if [[ $(docker ps --filter "name=main-app-*" --format '{{.Names}}' | grep -q main-app) ]]; then
            #     echo found
            # else
            #     echo not found
            # fi
            # docker stop $(docker ps -a -q)
            # docker rm $(docker ps -a -q)
            docker rm -f $(docker ps -a -q)

            # cd ./$SGHDIR && git pull
            # cd ./data && git switch main && git pull --rebase --autostash

            cd ./$SGHDIR/data && mkdir -p ~/stash
            git ls-files --others --exclude-standard | xargs -I {} mv {} ~/stash/
            git ls-files -m | xargs -I {} mv {} ~/stash/
            cd .. && git pull
            cd ./data && git switch main && git pull --rebase --autostash
            rsync -av ~/stash/* ./

            
            git ls-files --others --exclude-standard | grep trades | xargs git add
            pm2file="${{ github.event.inputs.pm2file }}"
            git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "$pm2file docker trade changes" && git push origin HEAD:main; }
            git ls-files -m | grep trades | xargs git add
            git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "$pm2file docker modified trade changes" && git push origin HEAD:main; }
            cd ..;
            git add ./data
            git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "$pm2file docker trade changes" && git push origin HEAD:main; }

            # mkdir reports
            # git ls-files --others --exclude-standard | grep trades | xargs -I {} mv {} reports/
            # git ls-files --others --exclude-standard | grep test | xargs -I {} mv {} reports/
            # git ls-files -m | grep trades | xargs -I {} mv {} reports/
            # git ls-files -m | grep test | xargs -I {} mv {} reports/
            # mv reports ../../reports; 
